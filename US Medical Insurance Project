{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# US Medical Insurance Project // by alleballer\r\n",
    "# Jupyter Notebook"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "source": [
    "# import all relevant libraries\r\n",
    "import pandas as pd\r\n",
    "import numpy as np\r\n",
    "import seaborn as sns\r\n",
    "import matplotlib.pyplot as plt\r\n",
    "\r\n",
    "data = pd.read_csv(\"C:\\\\Users\\\\alcb\\\\OneDrive - DI\\\\Documents\\\\insurance.csv\")\r\n"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "# [1] Look over your dataset\r\n",
    "\r\n",
    "First and foremost, the dataset holds no missing value. A further inspection showcase the data as to be clean with no compromising features. No further need for formatting. \r\n",
    "\r\n",
    "There is 1 index column and 7 attribute columns. These are age (1), sex (2), bmi (3), children (4), smoker (5), region (6) and charges (7)\r\n",
    "\r\n",
    "There are 1338 instances of data.\r\n",
    "\r\n",
    "A visual inspection helps find any features not located in the initial layer of the look-over of the dataset"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "source": [
    "# Allow for a two-fold visualization with the imported packages\r\n",
    "fig, axs = plt.subplots(ncols = 2, figsize=(30,5))\r\n",
    "# Use barplots to visualise age as compared to children and charges, respectively\r\n",
    "sns.barplot(x = \"age\", y = \"children\", data = data, ax = axs[0])\r\n",
    "sns.barplot(x = \"age\", y = \"charges\", data = data, ax = axs [1])\r\n",
    "\r\n"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='age', ylabel='charges'>"
      ]
     },
     "metadata": {},
     "execution_count": 206
    },
    {
     "output_type": "display_data",
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2160x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     }
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    " Thrre features appear out of the visual inspection.\r\n",
    " 1) The number of children peaks at the late 30's and early 40's. This is evident from the left-most barplot. Here, the number of children is over 2.0. The lowest number of children is found at 58, which is below 0.5\r\n",
    " 2) The insurance charges show a steadily increasing trend with an exception. For this plot, an increase in age show clear indications of increasing charges with expection of the late 30's and early 40's. The highest charges are found at the highest ages. This seems to follow the logic of increasing medical needs as the body ages. \r\n",
    " 3) Finally, an obvious but important observation is the range of 'age'. The spectrum ranges from 18 as the youngest to 64 as the oldest. This is intersting as people beyond 64 should require medical insurance. This however, poses question towards the initial data sampling and the methods used for this. For example if it was an online survey or service, the elder generations could have been less exposed to fill in information.\r\n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "# [2] Scoping the project\r\n",
    "\r\n",
    "Goals for this analysis are: \r\n",
    "1. Find out the median age of the patients in the dataset\r\n",
    "2. Analyze where the majority of the individuals are from\r\n",
    "3. Find the average cost of the patients in the dataset\r\n",
    "4. Determine the effect of smoking on the insurance price paid\r\n",
    "5. What is the average age of people who have at least one kid?\r\n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "1. Find out the median age of the patients in the dataset"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "source": [
    "# For this, the functionality of pandas is utilized. Clean, short and concise code is used to conduct the analysis\r\n",
    "# A function will help find the average age. This could also been coded with a Pandas function. But the ability to code clean and concise functions is demonstrated\r\n",
    "\r\n",
    "df = pd.DataFrame(data)\r\n",
    "# Use the dataframe to perform the analysis\r\n",
    "#print(df) \r\n",
    "\r\n",
    "df['age'].median()\r\n",
    "# The median age of the patients in the dataset is 39 years\r\n",
    "\r\n",
    "def average_age(age):\r\n",
    "# Finds the average age for patients in the dataset\r\n",
    "    count = sum(age)\r\n",
    "    number = len(age)\r\n",
    "    return count / number\r\n",
    "    \r\n",
    "print(average_age(df['age']))\r\n",
    "\r\n",
    "# Result\r\n",
    "# 39.0 is the median\r\n",
    "# 39.207"
   ],
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "39.20702541106129\n"
     ]
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "2. Analyze where the majority of the individuals are from"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "source": [
    "# For this, we use the value_counts() function from Pandas\r\n",
    "\r\n",
    "# The region column is chosen as this is the data of interest\r\n",
    "df['region'].value_counts()\r\n",
    "\r\n",
    "# The majority of the individuals are from the South-East of America\r\n",
    "# southeast 364\r\n",
    "# southwest 325\r\n",
    "# northwest 325\r\n",
    "# northeast 324\r\n"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "southeast    364\n",
       "southwest    325\n",
       "northwest    325\n",
       "northeast    324\n",
       "Name: region, dtype: int64"
      ]
     },
     "metadata": {},
     "execution_count": 208
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "3. Find the average cost of the patients in the dataset"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "source": [
    "# For this analysis we are going to showcase how easily coded an analysis can be when the application of a strong package is utilized... and how a function can solve it\r\n",
    "\r\n",
    "df['charges'].mean()\r\n",
    "\r\n",
    "# 13270.422265141257\r\n",
    "\r\n",
    "def average_charge(charges):\r\n",
    "# Finds the average_charge for patients in the dataset\r\n",
    "    count = sum(charges)\r\n",
    "    number = len(charges)\r\n",
    "    return count / number\r\n",
    "\r\n",
    "print(average_charge(df['charges']))\r\n",
    "\r\n",
    "# 13270.422265141257.\r\n",
    "\r\n",
    "# Thus the average charge is 13270.42 dollars"
   ],
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "13270.422265141257\n"
     ]
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "4. Determine the effect of smoking on the insurance price paid"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "source": [
    "# First, a visualization helps understand the explicit features and differences between yes and no (smokers vs. non-smokers) in relation to charges\r\n",
    "# Use barplots to visualise smoker as compared to charge, respectively\r\n",
    "sns.catplot(x = \"smoker\", y = \"charges\", \r\n",
    "            hue = 'sex', data = data, kind = \"box\", \r\n",
    "            height = 10, aspect =1.25,)"
   ],
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1930ff7e248>"
      ]
     },
     "metadata": {},
     "execution_count": 210
    },
    {
     "output_type": "display_data",
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 970.5x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     }
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "The plot above highlight three interesting features\r\n",
    "\r\n",
    "1) Smokers pay higher charges for their medical insurance. \r\n",
    "2) Male smokers pay the highest median cost of all demographic groups for their medical insurance\r\n",
    "3) Female non-smokers pay a higher median cost for their medical insurance as compared to non-smoking males\r\n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "source": [
    "# Lets find the average price paid for a smoker vs. non-smoker \r\n",
    "\r\n",
    "average_smoker_charges = df.loc[df['smoker'] == 'yes', 'charges'].mean()\r\n",
    "print(average_smoker_charges)\r\n",
    "\r\n",
    "# The average price for a smoker is 32050 dollars\r\n",
    "\r\n",
    "average_non_smoker_charges = df.loc[df['smoker'] == 'no', 'charges'].mean()\r\n",
    "print(average_non_smoker_charges)\r\n",
    "\r\n",
    "# The average price for a non-smoker is 8434 dollars\r\n",
    "\r\n",
    "# Thus we can conclude that an a smoker on average pays 280% more than a non-smoker does"
   ],
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "32050.23183153285\n",
      "8434.268297856199\n"
     ]
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "5. What is the average age of people who have at least one kid?"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "source": [
    "# To find the average age of people who have at least one kid the above functionality of pandas is used again. This helps ensure and streamline the code architecture should we chose to insert more data in the table\r\n",
    "\r\n",
    "average_age_with_one_kid = df.loc[df['children'] >= 1, 'age'].mean()\r\n",
    "print(average_age_with_one_kid)\r\n",
    "\r\n",
    "# The average age of people who have at least one kid is 39.78 years"
   ],
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "39.78010471204188\n"
     ]
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "# [3] Project extensions and final remarks\r\n",
    "\r\n",
    "The project holds potential bias in the sampling of the population. For example, the highest age is 64. We must acknowledge that the data is not representative of the population. Therefore bias occurs as to external validty. In other words, what we see here might not be representative of what happens in the population (real world). The\r\n",
    "\r\n",
    "Ideas for project extensions: Model training to predict the price of a individual, develop a function to classify the risk of becoming a high-paying insurance owner based on values used for the analysis. Further ideas could be to combine the dataset with other datasets and extend the analysis beyond the given attributes."
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [],
   "metadata": {}
  }
 ],
 "metadata": {
  "orig_nbformat": 4,
  "language_info": {
   "name": "python",
   "version": "3.7.11",
   "mimetype": "text/x-python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "pygments_lexer": "ipython3",
   "nbconvert_exporter": "python",
   "file_extension": ".py"
  },
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.7.11 64-bit ('myenv': conda)"
  },
  "interpreter": {
   "hash": "1b0c65b0f31364e20a130619e3e385f2e70eb005723fc873d254b4440a0e3de1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
